[build-system]
requires = ['hatchling', 'hatch-fancy-pypi-readme>=22.5.0']
build-backend = 'hatchling.build'

[tool.hatch.version]
path = '<library>/version.py'  # TODO: replace `library` with corresponding name

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.sdist]
# limit which files are included in the sdist (.tar.gz) asset,
include = [
    '/README.md',
    '/HISTORY.md',
    '/Makefile',
    '/tests',
    '/requirements',
    '<library>'  # TODO: replace `library` with corresponding name
]

[project]
name = "<library>"  # TODO: replace `library` with corresponding name
version = "0.1.0"
description = ""
authors = [
    {name = "Mermeid Designs", email = "mermeiddesigns@gmail.com"},
]
dependencies = [
    'typing-extensions>=4.6.1',
    'annotated-types>=0.4.0',
    "pydantic-core==2.7.0",
]
requires-python = ">=3.10"
readme = "README.md"
dynamic = ['version']
license = {text = "MIT"}

[tool.pdm.dev-dependencies]
docs = [
    "mkdocs",
    "mkdocstrings-python",
    "pyupgrade",
]
linting = [
    "yapf",
    "ruff",
    "pyupgrade",
    "mypy~=1.1.1",
]
testing = [
    "coverage[toml]",
    "pytest",
    "pyright"
]

[tool.coverage.run]
source = ['<library>']  # TODO: replace `library` with corresponding name
omit = []
branch = true
context = '${CONTEXT}'

[tool.coverage.report]
precision = 2
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    'if typing.TYPE_CHECKING:',
    '@overload',
    '@typing.overload',
    '\(Protocol\):$',
    'typing.assert_never',
    'assert_never',
]

[tool.coverage.paths]
source = [
    '<library>/',  # TODO: replace `library` with corresponding name
    '/Users/runner/work/Mermeid-Designs/<repo>/<library>/',  # TODO: replace `repo` and `library` with corresponding names
    'D:\a\Mermeid-Designs\<repo>\<library>',  # TODO: replace `repo` and `library` with corresponding names
]

[tool.pyright]
include = ['<library>']  # TODO: replace `library` with corresponding name
exclude = []
# reportUnnecessaryTypeIgnoreComment can't be set since we run pyright with multiple python versions
#reportUnnecessaryTypeIgnoreComment = true

[tool.codespell]
skip = '.git,env*'
# `ser` - abbreviation for "ser"ialisation
# `crate` - a rust crate
ignore-words-list = 'gir,ser,crate'

[tool.yapfignore]
ignore_patterns = [
  "**/__pycache__/*.py",
  "venv/**/*.py",
  ".venv/**/*.py"
]

[tool.ruff]
extend-select = [
    'Q',  # flake8-quotes
    'C90',  # mccabe
    'UP',   # pyupgrade
    'I',  # Isort
    'D',  # pydocstyle
    'T'  # flake8-
]
extend-ignore = [
    'D104',  # Missing docstring in public package
    'D105',  # missing docstring in magic method
    'D107',  # missing docstring in __init__
    'D205',  # 1 blank line required between summary line and description
    'D415',  # First line should end with a period, question mark, or exclamation point
    'E501'  # Line too long (handled by black)
]
flake8-quotes = {inline-quotes = 'single', multiline-quotes = 'double'}
mccabe = { max-complexity = 14 }
isort = { known-first-party = ['rdm_metadata', 'tests'] }

[tool.ruff.extend-per-file-ignores]
"tests/**/*.py" = ['T', 'E721', 'F811']

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
'docs/*' = ['D']
'rd_metadata/**/*__init__.py' = [
    'F401',  # {name} imported but unused
    'F405',  # undefined-local-with-import-star-usage
    'F403',  # undefined-local-with-import-star
    'D',  # pydocstyle
]
'tests/*' = ['D']
